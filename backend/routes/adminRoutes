const express = require("express");
const Student = require("../models/Student");
const Teacher = require("../models/Teacher");
const Course = require('../models/Course');
const Attendance = require("../models/attendance");
const jwt = require("jsonwebtoken");

const router = express.Router();

// âž¤ Middleware to check if user is an admin
const verifyAdmin = (req, res, next) => {
  try {
    const token = req.header("Authorization")?.split(" ")[1];
    if (!token) return res.status(403).json({ message: "Access denied" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (decoded.role !== "admin") {
      return res.status(403).json({ message: "Admin access required" });
    }
    
    req.user = decoded; // Attach user info to request
    next();
  } catch (error) {
    res.status(401).json({ message: "Invalid token" });
  }
};

// Create a new student (Admin Only)
router.post("/registerst",async (req, res) => {
  try {
    const {
      name,
      gender,
      dob,
      cnic,
      rollNo,
      degreeProgram,
      batch,
      campus,
      email,
      password,
      mobile,
      bloodGroup,
      address,
      familyInfo
    } = req.body;

    const existingStudent = await Student.findOne({ email });
    if (existingStudent) {
      return res.status(400).json({ message: "Student already exists" });
    }

    const newStudent = new Student({
      name,
      gender,
      dob,
      cnic,
      rollNo,
      degreeProgram,
      batch,
      campus,
      email,
      password, // password will be hashed in the pre-save hook
      mobile,
      bloodGroup,
      address,
      familyInfo,
      role: "student"
    });

    await newStudent.save();

    res.status(201).json(newStudent);
  } catch (error) {
    console.error("Admin - Student creation error:", error);
    res.status(500).json({ message: "Error creating student", error });
  }
});


//  Get all students (Admin Only)
router.get("/students", verifyAdmin, async (req, res) => {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (error) {
    res.status(500).json({ message: "Error fetching students", error });
  }
});

// Update a student (Admin Only)
/*router.put("/students/:id", verifyAdmin, async (req, res) => {
  try {
    const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json({ message: "Student updated", updatedStudent });
  } catch (error) {
    res.status(500).json({ message: "Error updating student", error });
  }
});*/

//  Delete a student (Admin Only)
router.delete("/students/:id", verifyAdmin, async (req, res) => {
  try {
    await Student.findByIdAndDelete(req.params.id);
    res.json({ message: "Student deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting student", error });
  }
});

// Create a new teacher (Admin Only)
router.post("/registerteacher",async (req, res) => {
  try {
    const {
      name,
      gender,
      dob,
      cnic,
      tid,
      department,
      datejoined,
      campus,
      email,
      password,
      mobile,
      bloodGroup,
      address,
      familyInfo
    } = req.body;

    const existingTeacher = await Teacher.findOne({ email });
    if (existingTeacher) {
      return res.status(400).json({ message: "Teacher already exists" });
    }

    const newTeacher = new Teacher({
      name,
      gender,
      dob,
      cnic,
      tid,
      department,
      datejoined,
      campus,
      email,
      password,
      mobile,
      bloodGroup,
      address,
      familyInfo,
      role: "teacher"
    });

    await newTeacher.save();

    res.status(201).json(newTeacher);
  } catch (error) {
    console.error("Admin - Teacher creation error:", error);
    res.status(500).json({ message: "Error creating teacher", error });
  }
});

router.get("/teachers", verifyAdmin, async (req, res) => {
    try {
      const students = await Student.find();
      res.json(students);
    } catch (error) {
      res.status(500).json({ message: "Error fetching students", error });
    }
  });
  
  // Update a student (Admin Only)
  router.put("/teachers/:id", verifyAdmin, async (req, res) => {
    try {
      const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
      res.json({ message: "Faculty member updated", updatedStudent });
    } catch (error) {
      res.status(500).json({ message: "Error updating faculty member", error });
    }
  });
  
  //  Delete a student (Admin Only)
  router.delete("/teachers/:id", verifyAdmin, async (req, res) => {
    try {
      await Student.findByIdAndDelete(req.params.id);
      res.json({ message: "Faculty member deleted successfully" });
    } catch (error) {
      res.status(500).json({ message: "Error deleting Faculty member", error });
    }
  });
  


  
// @route   POST /api/admin/registercourse
// @desc    Register a new course with optional prerequisites
router.post('/registercourse', async (req, res) => {
  try {
    const {
      id,
      name,
      instructor, // expected: { id: "...", name: "..." }
      semester,
      sections,
      seatAvailability,
      creditHours,
      prerequisites // expected: ["CS101", "MA202"]
    } = req.body;

    // Validate instructor object
    if (!instructor || !instructor.id || !instructor.name) {
      return res.status(400).json({ message: 'Instructor data is required (id and name).' });
    }

    // Validate that prerequisites is an array (optional)
    const validPrerequisites = Array.isArray(prerequisites) ? prerequisites : [];

    const newCourse = new Course({
      id,
      name,
      instructor: {
        id: instructor.id,
        name: instructor.name,
      },
      semester,
      sections,
      seatAvailability,
      creditHours,
      prerequisites: validPrerequisites
    });

    await newCourse.save();
    res.status(201).json(newCourse);
  } catch (error) {
    console.error('Error creating course:', error);
    res.status(500).json({ message: 'Server error while creating course' });
  }
});
  
  // @route   GET /api/courses
  // @desc    Get all courses
  router.get('/course', async (req, res) => {
    try {
      const courses = await Course.find();
      res.json(courses);
    } catch (error) {
      console.error('Error fetching courses:', error);
      res.status(500).json({ message: 'Server error while fetching courses' });
    }
  });
  
  // @route   GET /api/courses/:id
  // @desc    Get a course by course ID
  router.get('/course/:id', async (req, res) => {
    try {
      const course = await Course.findOne({ id: req.params.id });
      if (!course) {
        return res.status(404).json({ message: 'Course not found' });
      }
      res.json(course);
    } catch (error) {
      console.error('Error fetching course:', error);
      res.status(500).json({ message: 'Server error while fetching course' });
    }
  });
  
  // @route   PUT /api/courses/:id
  // @desc    Update a course by course ID
  router.put('/course/:id', async (req, res) => {
    try {
      const updated = await Course.findOneAndUpdate(
        { id: req.params.id },
        req.body,
        { new: true }
      );
      if (!updated) {
        return res.status(404).json({ message: 'Course not found' });
      }
      res.json(updated);
    } catch (error) {
      console.error('Error updating course:', error);
      res.status(500).json({ message: 'Server error while updating course' });
    }
  });

  // REGISTER COURSE
  router.post("/register", async (req, res) => {
    try {
      const { courseId, section, studentEmail, studentRollNo } = req.body;
  
      const course = await Course.findOne({ id: courseId, sections: section });
      if (!course) return res.status(404).json({ message: "Course not found" });
  
      const student = await Student.findOne({ email: studentEmail, rollNo: studentRollNo });
      if (!student) return res.status(404).json({ message: "Student not found" });
  
      const alreadyRegistered = student.registeredCourses.some(
        (c) => c.id === courseId && c.section === section
      );
      const alreadyWaitlisted = student.waitlistedCourses.some(
        (c) => c.id === courseId && c.section === section
      );
  
      if (alreadyRegistered || alreadyWaitlisted) {
        return res.status(400).json({ message: "Already registered or waitlisted" });
      }
  
      if (course.seatAvailability > 0) {
        course.seatAvailability -= 1;
        student.registeredCourses.push({ id: courseId, section });
        await course.save();
        await student.save();
        return res.status(200).json({ message: "Registered successfully", status: "registered" });
      } else {
        student.waitlistedCourses.push({ id: courseId, section });
        await student.save();
        return res.status(200).json({ message: "Added to waitlist", status: "waitlisted" });
      }
    } catch (error) {
      console.error("Registration error:", error);
      res.status(500).json({ message: "Server error during registration" });
    }
  });
  
  // DROP COURSE
  router.post("/drop", async (req, res) => {
    try {
      const { courseId, section, studentEmail, studentRollNo } = req.body;
  
      const course = await Course.findOne({ id: courseId, sections: section });
      if (!course) return res.status(404).json({ message: "Course not found" });
  
      const student = await Student.findOne({ email: studentEmail, rollNo: studentRollNo });
      if (!student) return res.status(404).json({ message: "Student not found" });
  
      let actionTaken = "";
  
      const isRegistered = student.registeredCourses.some(
        (c) => c.id === courseId && c.section === section
      );
      if (isRegistered) {
        student.registeredCourses = student.registeredCourses.filter(
          (c) => !(c.id === courseId && c.section === section)
        );
        course.seatAvailability += 1;
        actionTaken = "dropped";
      }
  
      const isWaitlisted = student.waitlistedCourses.some(
        (c) => c.id === courseId && c.section === section
      );
      if (isWaitlisted) {
        student.waitlistedCourses = student.waitlistedCourses.filter(
          (c) => !(c.id === courseId && c.section === section)
        );
        actionTaken = "removed_from_waitlist";
      }
  
      await course.save();
      await student.save();
  
      res.status(200).json({
        message: `Successfully ${actionTaken.replace("_", " ")}`,
        status: actionTaken,
      });
    } catch (error) {
      console.error("Drop error:", error);
      res.status(500).json({ message: "Server error during course drop" });
    }
  });
  
  
  router.get("/courses", async (req, res) => {
    try {
      const { email, rollNo } = req.query;
  
      if (!email || !rollNo) {
        return res.status(400).json({ message: "Email and roll number are required." });
      }
  
      const student = await Student.findOne({ email, rollNo });
      if (!student) {
        return res.status(404).json({ message: "Student not found." });
      }
  
      // Fetch registered courses using both id and section
      const registeredPromises = student.registeredCourses.map(c =>
        Course.findOne({ id: c.id, sections: c.section })
      );
      const waitlistedPromises = student.waitlistedCourses.map(c =>
        Course.findOne({ id: c.id, sections: c.section })
      );
  
      const registered = (await Promise.all(registeredPromises)).filter(Boolean);
      const waitlisted = (await Promise.all(waitlistedPromises)).filter(Boolean);
  
      res.status(200).json({
        registered,
        waitlisted,
      });
    } catch (error) {
      console.error("Error fetching student courses:", error);
      res.status(500).json({ message: "Server error while fetching student courses" });
    }
  });
  
  router.get("/courses/:id/sections/:section/students", async (req, res) => {
    const { id, section } = req.params;
  
    try {
      const students = await Student.find({
        registeredCourses: {
          $elemMatch: { id, section }
        }
      });
  
      res.status(200).json(students);
    } catch (error) {
      console.error("Error fetching enrolled students:", error);
      res.status(500).json({ message: "Server error while fetching students" });
    }
  });
  
  router.post('/attendance', async (req, res) => {
    try {
      const attendance = new Attendance(req.body);
      await attendance.save();
      res.status(201).json(attendance);
    } catch (error) {
      console.error('Error saving attendance:', error);
      res.status(500).json({ message: 'Server error while saving attendance' });
    }
  });

  router.get('/attendance/:courseId/:section', async (req, res) => {
    const { courseId, section } = req.params;
    try {
      const records = await Attendance.find({ courseId, section }).sort({ date: -1 });
      res.status(200).json(records);
    } catch (error) {
      console.error('Error fetching attendance:', error);
      res.status(500).json({ message: 'Server error while fetching attendance' });
    }
  });
  
  router.put('/attendance/:id', async (req, res) => {
    try {
      const updated = await Attendance.findByIdAndUpdate(req.params.id, req.body, { new: true });
      res.status(200).json(updated);
    } catch (error) {
      console.error('Error updating attendance:', error);
      res.status(500).json({ message: 'Server error while updating attendance' });
    }
  });

  router.get('/teachers/:tid/courses', async (req, res) => {
    const { tid } = req.params;
  
    try {
      const courses = await Course.find({ 'instructor.id': tid.trim() }); // normalize & compare string
      res.status(200).json(courses);
    } catch (error) {
      console.error('Error fetching teacher courses:', error);
      res.status(500).json({ message: 'Server error while fetching courses' });
    }
  });
  
  
  
  

  

module.exports = router;
